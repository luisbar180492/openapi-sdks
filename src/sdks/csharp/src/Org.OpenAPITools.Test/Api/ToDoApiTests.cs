/*
 * To Do API
 *
 * A To Do API example which demonstrate features in the OpenAPI 3.0 specification
 *
 * The version of the OpenAPI document: 1.0.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ToDoApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ToDoApiTests : IDisposable
    {
        private ToDoApi instance;

        public ToDoApiTests()
        {
            instance = new ToDoApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ToDoApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ToDoApi
            //Assert.IsType<ToDoApi>(instance);
        }

        /// <summary>
        /// Test CreateOne
        /// </summary>
        [Fact]
        public void CreateOneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToDoItem toDoItem = null;
            //var response = instance.CreateOne(toDoItem);
            //Assert.IsType<ToDoItem>(response);
        }

        /// <summary>
        /// Test DeleteOne
        /// </summary>
        [Fact]
        public void DeleteOneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteOne(id);
        }

        /// <summary>
        /// Test GetMany
        /// </summary>
        [Fact]
        public void GetManyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //var response = instance.GetMany(limit);
            //Assert.IsType<List<List>>(response);
        }

        /// <summary>
        /// Test GetOne
        /// </summary>
        [Fact]
        public void GetOneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetOne(id);
            //Assert.IsType<ToDoItem>(response);
        }
    }
}
