/*
 * To Do API
 *
 * A To Do API example which demonstrate features in the OpenAPI 3.0 specification
 *
 * The version of the OpenAPI document: 1.0.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;

namespace Org.OpenAPITools.Apis
{ 
    public partial class ToDoApi
    { 
        [FunctionName("ToDoApi_CreateOne")]
        public async Task<IActionResult> _CreateOne([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/toDo")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("CreateOne");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("ToDoApi_DeleteOne")]
        public async Task<IActionResult> _DeleteOne([HttpTrigger(AuthorizationLevel.Anonymous, "DELETE", Route = "/toDo/{id}")]HttpRequest req, ExecutionContext context, Guid id)
        {
            var method = this.GetType().GetMethod("DeleteOne");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("ToDoApi_GetMany")]
        public async Task<IActionResult> _GetMany([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/toDo")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("GetMany");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("ToDoApi_GetOne")]
        public async Task<IActionResult> _GetOne([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/toDo/{id}")]HttpRequest req, ExecutionContext context, Guid id)
        {
            var method = this.GetType().GetMethod("GetOne");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }
    }
}

