/**
 * To Do API
 * A To Do API example which demonstrate features in the OpenAPI 3.0 specification
 *
 * The version of the OpenAPI document: 1.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ToDoItem from '../model/ToDoItem';

/**
* ToDo service.
* @module api/ToDoApi
* @version 1.0.24
*/
export default class ToDoApi {

    /**
    * Constructs a new ToDoApi. 
    * @alias module:api/ToDoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOne operation.
     * @callback module:api/ToDoApi~createOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToDoItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new to do item
     * @param {module:model/ToDoItem} toDoItem To do item to create
     * @param {module:api/ToDoApi~createOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToDoItem}
     */
    createOne(toDoItem, callback) {
      let postBody = toDoItem;
      // verify the required parameter 'toDoItem' is set
      if (toDoItem === undefined || toDoItem === null) {
        throw new Error("Missing the required parameter 'toDoItem' when calling createOne");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToDoItem;
      return this.apiClient.callApi(
        '/toDo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOne operation.
     * @callback module:api/ToDoApi~deleteOneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a to do item by id
     * @param {String} id ID of to do item to delete
     * @param {module:api/ToDoApi~deleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/toDo/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMany operation.
     * @callback module:api/ToDoApi~getManyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all to do items. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit maximum number of results to return
     * @param {module:api/ToDoApi~getManyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    getMany(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/toDo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOne operation.
     * @callback module:api/ToDoApi~getOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToDoItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a to do item by id
     * @param {String} id ID of to do item to return
     * @param {module:api/ToDoApi~getOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToDoItem}
     */
    getOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ToDoItem;
      return this.apiClient.callApi(
        '/toDo/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
